set nu
set ts=4 " Tab width: tabstop
set sts=4 " Soft Tab width: softtabstop
set shiftwidth=4
:set expandtab
:%retab!
set viminfo='1000,<800

syntax on
set t_Co=256

:set mouse=a
set incsearch " 搜索或者查找替换时，自动高亮匹配的字符串
" set hlsearch " 高亮搜索结果
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

Plugin 'scrooloose/nerdtree'
let g:NERDTreeWinPos='left'
let g:NERDTreeWinSize=30
map <F2> :NERDTreeToggle<CR>

Plugin 'bling/vim-airline'
set laststatus=2

Plugin 'Yggdroot/indentLine'
let g:indentLine_char = '|'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

map <F3> :set paste<CR>
map <F4> :set nopaste<CR>
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "    normal! g'\"" | endif
endif
set backspace=indent,eol,start

" 新建模板文件
autocmd BufNewFile *.[ch],*.[ch]pp,Makefile,*.mk,*.sh,*.py call SnewFileCommet()

func SnewFileCommet_c()
    " call setline(1, "/**")
    " call append(line("."), "* ")
    let infos = "/**\n"
                \."* @Author: Stick Cui\n"
                \."* @Email: Stick_Cui@163.com\n"
                \."* @Link: https://github.com/StickCui\n"
                \."* @Date: ".strftime("%Y-%m-%d %H:%M:%S")."\n"
                \."*\n"
                \."* Copyright (C) ".strftime("%Y")." Stick Cui. All Rights Reserved.\n"
                \."*/\n"
                \."\n"
    silent put! =infos
endfunc

func SnewFileCommet_sh()
    let infos = "# @Author: Stick Cui\n"
                \."# @Email: Stick_Cui@163.com\n"
                \."# @Link: https://github.com/StickCui\n"
                \."# @Date: ".strftime("%Y-%m-%d %H:%M:%S")."\n"
                \."#\n"
                \."# Copyright (C) ".strftime("%Y")." Stick Cui. All Rights Reserved.\n"
    silent put =infos
endfunc

func SnewFileCommet()
    if &filetype == "make"
        call setline(1, "# Makefile")
        call SnewFileCommet_sh()
    elseif &filetype == "sh"
        call setline(1,"#!/bin/bash")
        call SnewFileCommet_sh()
    elseif &filetype == "python"
        let infos ="#!/usr/bin/env python\n"
                    \."# -*- coding: utf-8 -*-\n"
        silent put! =infos
        call SnewFileCommet_sh()
        call append(line("."), "import argparse")
        call append(line(".")+1, "import os")
        call append(line(".")+2, "")
        call append(line(".")+3, "def main(args):")
        call append(line(".")+4, "    pass")
        call append(line(".")+5, "")
        call append(line(".")+6, "if __name__ == '__main__':")
        call append(line(".")+7, "    parser = argparse.ArgumentParser(description=\"\")")
        call append(line(".")+8, "    parser.add_argument(\"-i\", \"--input\", type=str, default=\"\")")
        call append(line(".")+9, "    parser.add_argument(\"-o\", \"--output\", type=str, default=\"\")")
        call append(line(".")+10, "    args = parser.parse_args()")
        call append(line(".")+11, "    main(args)")
    else
        call SnewFileCommet_c()
        if expand("%:e") == "h"
            call append(line("."), "#ifndef _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_H_")
            call append(line(".")+1, "#define _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_H_")
            call append(line(".")+2, "#include <stdio.h>")
            call append(line(".")+3, "#ifdef __cplusplus")
            call append(line(".")+4, "extern \"C\" {")
            call append(line(".")+5, "#endif")
            call append(line(".")+6, "")
            call append(line(".")+7, "")
            call append(line(".")+8, "")
            call append(line(".")+9, "#ifdef __cplusplus")
            call append(line(".")+10, "};")
            call append(line(".")+11, "#endif")
            call append(line(".")+12, "#endif // _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_H_")
        elseif expand("%:e") == "hpp"
            call append(line("."), "#ifndef _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_HPP_")
            call append(line(".")+1, "#define _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_HPP_")
            call append(line(".")+2, "")
            call append(line(".")+3, "#include <iostream>")
            call append(line(".")+4, "")
            call append(line(".")+5, "#endif // _".toupper(join(split(expand("%:t:r"), "-"), "_"))."_HPP_")
        elseif expand("%:e") == "c"
            call append(line("."), "#include <stdio.h>")
        elseif expand("%:e") == "cpp"
            call append(line("."), "#include <iostream>")
        endif
    endif
endfunc
